import abc
from enum import Enum


class Circuit_Breaker():
    """
    Шаблон микросервисов, который предотвращает сбои в восходящем потоке, приводящие к каскадным сбоям в нисходящем
потоке.
 Это делается с помощью прокси-сервера с отслеживанием состояния (со счетчиком), который отслеживает количество сбоев
и выполняет повторные попытки тщательно разработанным образом.
    """
    class State(Enum):
        CLOSED = 1
        OPEND = 2
        HALF_OPEN = 3

    THRESHOLD = 5
    TIMEOUT = 30
    state = State.CLOSED

    def __init__(self, counter_limit=THRESHOLD, timeout=TIMEOUT, **kwargs):
        self.counter_limit = counter_limit
        self.timout = timeout

    @abc.abstractmethod
    def ops_wrapper(self, **kwargs):
        """
        Завершает защищенную операцию в этом методе
        """
        pass

    @ abc.abstractmethod
    def closed(self):
        """
        Разрешите приложению выполнить запрос, в то время
как прокси-сервер будет отслеживать количество неудачных попыток.
 Когда счетчик превысит пороговое значение, соединение будет прервано
        """
        pass

    @ abc.abstractmethod
    def open(self):
        """
        Запросы немедленно завершатся ошибкой, и будет возвращено исключение.
 Однако по истечении времени ожидания автоматический выключатель перейдет в состояние “Полуоткрыто”.
        """
        pass

    @ abc.abstractmethod
    def open(self):
        """
        Позволяет пройти только ограниченному числу запросов и вызвать операцию.
 Если эти запросы будут выполнены успешно, автоматический выключатель вернется в состояние “Закрыто” и сбросит счетчик.
 Однако, если какой-либо запрос не будет выполнен, он перейдет в состояние “Открыто” и перезапустит тайм-аут.
 Это полезно для предотвращения повторного заполнения службы восстановления предстоящими запросами, что может привести к повторным сбоям.
        """
        pass
